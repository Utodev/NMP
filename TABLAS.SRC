
(* DEBE IR MAS TARDE DE EL PALABRAS.SRC *)

TYPE ListaEtiquetas=^Etiqueta;
     PuntCondacto =  Pointer;
     TablaProceso = ^Orden;
     Orden = RECORD
              Verbo,Nombre:Byte;
              sig:TablaProceso;
              cond:PuntCondacto;
             END;
     Etiqueta=record
               nombre:palabra;
               orden:Word; (* N§ de instrucci¢n en la entrada 0,1,2,... *)
               dirbase:TablaProceso;
               NumProc:Byte;
               IdMacro:Word;
               iz,der:ListaEtiquetas;
              END;
     Condacto = RECORD
                 Token:Word;
                 IND:Byte;
                 Pa:ARRAY[1..9] OF BYTE; (* Par metros *)
                END;


(* Los parametros se almacenan en el campo PA del siguiente modo:
   1..6: Espacio para par metro 1, el £nico que puede ser palabra
         si es word o byte ocupar  el 1-2 o s¢lo el 1 respectivamente
   7..8: Espacio para par metro 2, si es byte s¢lo ocupa el 7.
   9   : Espacio para par metro 3, siempre byte *)

     ListaProc = ARRAY[0..255] OF TablaProceso;
     (* 0-Response 1-PR1 2-PR2 64-PRInterrupt *)
CONST Rep:Word=212;

VAR Procesos : ListaProc;
    Etiq:ListaEtiquetas;

     Procedure NuevaEtiqueta(Var E:ListaEtiquetas;Pa:Palabra;Orden:Word;P:TablaProceso;N:Byte;idmc:Word);
     BEGIN
      IF E=NIL THEN BEGIN
                     GetMem(pointer(E),SizeOf(Etiqueta));
                     E^.nombre:=pa;
                     E^.Orden:=Orden;
                     E^.numproc:=N;
                     E^.dirbase:=p;
                     E^.Idmacro:=idmc;
                     E^.iz:=NIL;
                     E^.der:=NIL;
                    END
      ELSE IF Pa>=E^.nombre THEN NuevaEtiqueta(E^.der,Pa,orden,P,n,idmc)
      ELSE IF Pa<E^.nombre THEN NuevaEtiqueta(E^.iz,Pa,orden,P,n,idmc)
     END;

     Function Recurs(E:ListaEtiquetas;P:Palabra;VAR PBase:TablaProceso;NProc:Byte):Word;
      BEGIN
       IF E=NIL THEN Recurs:=65535
        ELSE IF (E^.nombre=P) AND (E^.NumProc=NProc) AND (E^.Idmacro=MacroId) THEN
                                 BEGIN
                                  Recurs:=E^.Orden;
                                  PBase:=E^.dirbase
                                 END
        ELSE IF p<E^.nombre THEN Recurs:=recurs(e^.iz,p,Pbase,nproc)
        ELSE Recurs:=recurs(e^.der,p,pbase,nProc)
      END;

PROCEDURE LeerProcesos;

VAR S:SearchRec;
    P:TablaProceso;
    F:File;
    Valor,Codigo:Word;
    PC:Condacto;
    By2:Byte;
    Wo:Word;
    Pa:Palabra;
    I:Byte;
    Done:Boolean;
    Idmc,Idmcs:Word;
    Sinon:Boolean;
    By:Word;
    St:String;
    IK:Integer;
    AuxPtr:Pointer;
    Offs,BuffSize:Word;
    LISTSINON:ARRAY[0..100] OF TablaProceso;
    SINONES:Word;

LABEL REPE;


PROCEDURE ADD(VAR A; Size:Word);
BEGIN
 MOVE(A,pointer(longint(AuxPtr)+Offs)^,Size);
 INC(Offs,Size);
 IF Offs>BuffSize THEN Error(2);
END;

BEGIN
 IF MaxAvail>2000 THEN BuffSize:=2000
                  ELSE BuffSize:=MaxAvail;
 GetMem(AuxPtr,Buffsize);
 Etiq:=NIL;
 St:='*.XMP';
 IF ISPACKED THEN BuscaPrimero(St)
             ELSE FindFirst('*.XMP',ANYFILE,S);
 WHILE ((DosError=0) AND NOT ISPACKED) OR ((St<>'') AND ISPACKED) DO
  BEGIN
   IF ISPACKED THEN S.Name:=ST;
   Assign(F,S.Name);
   Reset(F,1);
   IF S.NAME='R.XMP' THEN Valor:=0 ELSE
    IF S.NAME='I.XMP' THEN Valor:=64 ELSE
     VAL(Copy(S.Name,1,length(S.Name)-4),Valor,Codigo);
   GetMem(pointer(Procesos[valor]),SizeOf(Orden));
   P:=Procesos[Valor];
   Idmc:=0;
   IdMcs:=0;
   WHILE NOT EOF(F) DO
    BEGIN
     SINONES:=0;
     REPE:
     BlockRead(F,P^.Verbo,1);
     BlockRead(F,P^.Nombre,1);
     LISTSINON[SINONES]:=p;
     INC(SINONES);
     P^.sig:=NIL;
     Done:=False;
     Offs:=0;
     WHILE NOT DONE DO
      BEGIN
       BlockRead(F,By,2);  (*Leo Token*)
       IF By=Rep THEN BEGIN
                       GetMem(Pointer(P^.Sig),Sizeof(Orden));    (*    -romper rama   ------->  at 4        *)
                       P:=P^.Sig;                                (*                       |     isat 7 4    *)
                       GOTO REPE                                 (*   AMBAS ENTRADAS APUNTAN AL MISMO SITIO *)
                      END;
       PC.Token:=By;
       PC.Ind:=0;
       FillD(PC.pa,9,0);
       IF Coma[By].Flags[1]>'0' THEN
        BEGIN
         BlockRead(F,PC.Ind,1);
         CASE Coma[By].Flags[2] OF
          '1','2','5'..'9':BlockRead(F,PC.pa,1);   (* Leo parametro byte *)
          '3':BlockRead(F,PC.pa,2);                (* leo parametro word *)
          '4':BlockRead(F,PC.pa,6);
         END; {CASE}
         IF Coma[By].Flags[1]>'1' THEN
          BEGIN
           BlockRead(F,By2,1);
           PC.IND:=PC.IND OR (By2 SHL 1);
           CASE Coma[By].Flags[3] OF
            '1','2','5'..'9':BlockRead(F,PC.pa[7],1);
            '3':BlockRead(F,PC.pa[7],2);
           END {CASE};
           IF Coma[By].Flags[1]>'2' THEN
            BEGIN
             BlockRead(F,By2,1);
             PC.IND:=PC.IND OR (By2 SHL 2);
             BlockRead(F,PC.pa[9],1);
            END; (* IF >2 *)
          END; (*IF >1 *)
        END;  {IF >0 }

       Move(PC.pa,pa,6);  (* por si acaso ahora necesito el 1er param como string *)
       IF By=183 THEN BEGIN
                       Idmc:=Idmcs+1;
                       Inc(IdMcs);
                       Pc.pa[8]:=Idmc;
                      END;
       IF By=184 THEN IdMc:=0;
       IF By=108 THEN NuevaEtiqueta(Etiq,pa,Offs DIV SizeOf(Condacto),P,VALX( Copy(S.Name,1,Pos('.',S.Name)-1) ),idmc);
       IF (By>=93) AND (By<=97) THEN Done:=True;
       ADD(PC,12); (* meto condacto en buffer *)
      END; {WHILE NOT DONE}
      GetMem(LISTSINON[0]^.Cond,Offs);
      MOVE(AuxPtr^,ListSINON[0]^.COnd^,Offs);
      FOR IK:=1 TO SINONES-1 DO
       LISTSINON[IK]^.COnd:=LISTSINON[0]^.COnd;
      IF NOT EOF(F) THEN BEGIN
                          GetMem(pointer(P^.sig),SizeOf(Orden));
                          P:=P^.sig;
                         END
   END; {WHILE NOT EOF}
   Close(F);
   IF ISPACKED THEN BuscaSiguiente(St) ELSE FindNext(S);
  END; (* WHILE FINDFIRST *)
 IF ISPACKED THEN ACABABUSQUEDA;
 FreeMem(AuxPtr,Buffsize);
 END;
